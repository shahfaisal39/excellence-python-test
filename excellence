# excellence-python-test
# Q.1 function of sum of list
def sum(numbers):
    total = 0
    for x in numbers:
        total += x
    return total
print(sum((1,2,3,4)))

# Q.2 find maximum in dic using by python

dic={
   "1": 50,
   "2": 60
   "3" : 70
}
s=max(dic,key=dic.get)
a=max(dic.values())
print(s,':',a)

# Q.3 Write a python function to the number of maximum consecutive  oneâ€™s present in the array. 
# E.g output for the above array would be 4

def getMaxLength(arr, n): 
  
    # intitialize count 
    count = 0 
      
    # initialize max 
    result = 0 
  
    for i in range(0, n): 
      
        if (arr[i] == 0): 
            count = 0
  
        
        else: 
              
            # increase count 
            count+= 1 
            result = max(result, count)  
          
    return result  
  
arr = [0,0,0,1,1,1,0,0,0,1,1,0,1,1,1,1,0,0,1,1] 
n = len(arr)  
  
print(getMaxLength(arr, n)) 

#Question :-4
#Design a mysql database. Requirements are as follows 

DEBUG = False

# Define the application directory
import os
BASE_DIR = os.path.abspath(os.path.dirname(_file_))


SQLALCHEMY_DATABASE_URI = database

SQLALCHEMY_TRACK_MODIFICATIONS = False
DATABASE_CONNECT_OPTIONS = {}

# Enable protection against Cross-site Request Forgery (CSRF)
CSRF_ENABLED = True

# Use a secure, unique and absolutely secret key for
# signing the data.
CSRF_SESSION_KEY = "secret_key1"

# Secret key for signing cookies
SECRET_KEY = "secret_key1"

from flask import Flask
# from flask_login import LoginManager
from flask_migrate import Migrate
from flask_restful import reqparse, abort, Api, Resource

# Import SQLAlchemy
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS

# Define the WSGI application object
app = Flask(_name_, static_url_path='/static/')

# Configurations
app.config.from_object('config')

db = SQLAlchemy(app)
db.init_app(app)
migrate = Migrate(app, db)

from sqlalchemy import ForeignKey
from datetime import datetime
from werkzeug.security import generate_password_hash
from flask import request, jsonify, render_template

class User(db.Model):
    _tablename_ = 'user_registration'
    id = db.Column(db.Integer, primary_key=True, unique=True)
    username = db.Column(db.String(64), index=True, nullable=False)
    password = db.Column(db.String(64), index=True, nullable=False)

class Address(db.Model):
    _tablename_ = 'address'
    id = db.Column(db.Integer, primary_key=True, unique=True)
    user = db.Column(db.Integer, ForeignKey('user_registration.id'))
    street = db.Column(db.String(64), index=True, nullable=False)
    country = db.Column(db.String(64), index=True, nullable=False)
    state = db.Column(db.String(64), index=True, nullable=False)
    phone_no = db.Column(db.String(64), index=True, nullable=False)
    pincode = db.Column(db.Integer, index=True, nullable=False)


@app.route("user_registration", methods=['POST'])
def user_registration():
    data = request.json
    user_obj = User(username=data['username'],password_hash=password)
    db.session.add(user_data)
    db.session.commit()
    return jsonify({"message": "user Register successfully.","status":True})

@app.route("login_user", methods=['POST'])
def login_user():
    data = request.json
    user_obj = User.query.filter_by(username=data['username'],password=data['password'])
    if user_obj:
        return jsonify({"message":"Please enter correct credential.","status":False})
    payload = {
        'exp': datetime.utcnow() + timedelta(days=7),
        'iat': datetime.utcnow(),
        'sub': user_obj.id
    }
    token = jwt.encode(
        payload,
        'secret',
        algorithm='HS256'
    )
    return jsonify({"token":token,"message":"login successfully.","status":True})

@app.route("user_detail", methods=['GET'])
def get_user_detail():
    auth_token = request.headers.get("authorization", None).split(' ')[1]
    payload = jwt.decode(auth_token, 'secret', algorithms=JWT_ALGORITHM)
    user_id = payload['sub']
    user_obj = User.query.filter_by(id=user_id)
    if not user_obj:
        return jsonify({"message":"User does not found","status":False})
    return jsonify({"data":user_obj,"status":True})

@app.route("add_address", methods=['POST'])
def create_address():
    data = request.json
    auth_token = request.headers.get("authorization", None).split(' ')[1]
    payload = jwt.decode(auth_token, 'secret', algorithms=JWT_ALGORITHM)
    user_id = payload['sub']
    address_obj = Address(user=user_id,street=data['street'],country=data['country'],state=data['state'],phone_no=data['phone_no'],pincode=data['pincode'])
    db.session.add(address_obj)
    db.session.commit()
    return jsonify({"message": "user Register successfully.","status":True})

@app.route("update_address", methods=['PUT'])
def update_address():
    data = request.json
    auth_token = request.headers.get("authorization", None).split(' ')[1]
    payload = jwt.decode(auth_token, 'secret', algorithms=JWT_ALGORITHM)
    user_id = payload['sub']
    address_obj = Address.query.filter_by(id=data['id'])
    if not address_obj:
        return jsonify({"messsage":"please enter correct address id","status":False})
    address_obj.street=data['street']
    address_obj.country=data['country']
    address_obj.state=data['state']
    address_obj.phone_no=data['phone_no']
    address_obj.pincode=data['pincode']
    db.session.commit()
    return jsonify({"message":"address updated successfully.","status":True})


    
if _name_ == '_main_':
    app.run(host='0.0.0.0', port=5000)  











































































